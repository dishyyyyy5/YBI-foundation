# -*- coding: utf-8 -*-
"""DA.project1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1anIjnw_fUwZHwOqfdOWvzmybYRfCjyOp

**TITLE OF PROJECT : MOVIE RECOMMENDATION PROECT**

**OBJECTIVE :** 1. IT RECOMMENDS OTHER MOVIES WHICH ARE SIMILAR TO THE MOVIE WHICH IS SELECTED.
2. IT ALSO RECOMMENDS MOVIES WHICH ARE HIGHLY RATED BY THE SIMILAR USERS.

**DATA SOURCE :** https://github.com/YBI-Foundation/Dataset

**IMPORT LIBRARY :**
"""

import pandas as pd

import numpy as np

"""**IMPORT DATASET :**"""

movie = pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Movies%20Recommendation.csv')

movie.head()

movie.info()

movie.shape

movie.columns

"""**GET FEATURE SELECTION :**"""

movie_features = movie[[ 'Movie_ID','Movie_Title','Movie_Language','Movie_Spoken_Language', 'Movie_Tagline', 'Movie_Cast', 'Movie_Crew',
       'Movie_Director']].fillna('')

movie_features.shape

movie_features

x = movie_features['Movie_Title'] + '' +  movie_features['Movie_Language'] + '' +  movie_features['Movie_Spoken_Language'] + '' +  movie_features['Movie_Tagline'] + '' +  movie_features['Movie_Cast'] + '' +  movie_features['Movie_Crew'] + '' +  movie_features['Movie_Director']

x

x.shape

"""**GET FEATURE TEXT CONVERSION TO TOKENS :**"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer()

x = tfidf.fit_transform(x)

x.shape

print(x)

"""**GET SIMILARITY SCORE USING COSINE SIMILARITY :**"""

from sklearn.metrics.pairwise import cosine_similarity

Similarity_score = cosine_similarity(x)

Similarity_score.shape

"""**GET MOVIE NAME AS I/P FROM USER AND VALIDATE FOR CLOSEST SPELLING :**"""

fav_movie = input('ENTER YOUR FAVOURITE MOVIE NAME :')

All_movies_title_list = movie['Movie_Title'].tolist()

for title in All_movies_title_list:
    print((title))

import difflib

Movie_Recommendation = difflib.get_close_matches(fav_movie, All_movies_title_list)
print(Movie_Recommendation)

Close_match = Movie_Recommendation[0]
print(Close_match)

import difflib

Close_match = difflib.get_close_matches(fav_movie, All_movies_title_list)[0]

Index_of_Close_match_movie = movie[movie.Movie_Title == Close_match].values[0]

print(Index_of_Close_match_movie)

Recommendation_score = list(enumerate(Similarity_score[0]))
print(Recommendation_score)

len(Recommendation_score)

"""**GET ALL MOVIES BASED ON RECOMMENDATION SCORE WRT FAV. MOVIE :**"""

sorted_similar_movies = sorted(Recommendation_score , key = lambda x:x[1], reverse=True)
print(sorted_similar_movies)

print('Top 30 movies suggested for you :\n')

top_30_movies = movie.sort_values(by='Movie_Popularity', ascending=False).head(30)

for i, row in top_30_movies.iterrows():
    print(row['Movie_Title'])

"""**TOP 10 MOVIE RECOMMENDATION SYSTEM :**"""

top_10_movies = movie.sort_values(by='Movie_Popularity', ascending=False).head(10)

for i, row in top_10_movies.iterrows():
    print(row['Movie_Title'])